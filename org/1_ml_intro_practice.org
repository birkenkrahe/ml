#+TITLE: How machines learn - Nile example
#+AUTHOR: [yourname]
#+SUBTITLE: In-class practice
#+STARTUP:overview hideblocks indent
#+OPTIONS: toc:nil num:nil ^:nil
#+PROPERTY: header-args:R :session *R* :results output :exports both :noweb yes
* README

This file covers the ~Nile~ example from the introductory lecture on
machine learning:
- Data storage
- Transformation of data
- Modeling of data
- Training the model

Most of this material can be found in Lantz, Machine Learning with R
(3e, 2019), Packt. Solutions are on GitHub as PDF files.

* TODO Identify and pledge yourself

1) In Emacs, replace the placeholder ~[yourname]~ at the top of this
   file by your own name and write ~(pledged)~ next to it
2) Go with the cursor on the headline and hange the ~TODO~ label to ~DONE~
   by entering ~S-<right>~ ("Shift + right-arrow").

* TODO Data storage: text file

1) Example: the following numbers come from R's ~Nile~ data set:
   #+begin_example
   1120 1160 963 1210 1160 1160 813 1230 1370 1140
   995 935 1110 994 1020 960 1180 799 958 1140
   1100 1210 1150 1250 1260 1220 1030 1100 774 840
   874 694 940 833 701 916 692 1020 1050 969
   831 726 456 824 702 1120 1100 832 764 821
   768 845 864 862 698 845 744 796 1040 759
   781 865 845 944 984 897 822 1010 771 676
   649 846 812 742 801 1040 860 874 848 890
   744 749 838 1050 918 986 797 923 975 815
   1020 906 901 1170 912 746 919 718 714 740
   #+end_example

2) To extract the data from the data set (already stored in R), write
   the dataset ~Nile~ to a file called ~Nile.txt~.
   #+begin_src R :results silent
     write(x=Nile,
           file="____.___",
           ncolumns=1,
           sep=" ")
   #+end_src

3) List the text file from within R using ~shell~ and the Windows
   command ~DIR~:
   #+begin_src R
     shell(cmd="___ ____.___")
   #+end_src

4) Look at the file using Windows' ~notepad~ text editor:
   #+begin_src R :results silent
     shell(cmd="notepad ____")
   #+end_src

* TODO Abstraction: transformation

1) Read the text data from file using ~read.table~ and store them in a
   time series using ~ts~. Use the correct separator for the data, and
   specify if the ~header~ should be imported or not.
   #+begin_src R
     ## read the text file as a data.frame
     nile_df <- read.table(
       file="Nile.txt",
       sep="_",
       header=_____)

     ## remove column name with colnames
     colnames(nile_df) <- ____

     ## create time series with ts from the data frame
     nile_ts <- ts(data = _______,start=1871)
   #+end_src

2) Display R object structure of the time series:
   #+begin_src R
     ## show structure of time series
     ___(nile_ts)
   #+end_src

* TODO Generalization: modeling

1) The ~summary~ function represents a statistical model:
   #+begin_src R
     data(Nile)    # add the built-in Nile dataset to the session
     ____          # show all R objects in the current session
     summary(Nile) # 5-point summary + sample average
   #+end_src

2) Visualize the model as a ~boxplot~ (with ~abline~ to add the ~mean~) and
   store the result in the file ~1_boxplot.png~
   #+begin_src R :results graphics file :file ___________
     boxplot(Nile,
             las=1,
             horizontal=TRUE,
             main="Annual flow of the Nile at Aswan\nbetween 1871 and 1970",
             xlab="Nile volume (mio cubic meters)")

     abline(v=mean(Nile),
            col="blue",
            lwd=2)
   #+end_src

3) That ~summary~ is generic is relevant because it means that it can
   deal with many different abstractions (and models, too): run the
   function ~methods~ on the function ~summary~ as its argument:
   #+begin_src R
     _______
   #+end_src

* TODO Training a physics model of gravity

1) The table shows observed distance of an object falling near Earth
   and the corresponding time to reach that distance:
   | DISTANCE [m] | TIME [s] |
   |--------------+----------|
   |          4.9 |        1 |
   |         19.6 |        2 |
   |         44.1 |        3 |
   |         78.5 |        4 |

2) Transforming the data to fit the data to the model (~g~):
   #+begin_src R
     d <- _____________  # distance data
     t <- _____________  # time data
     2*d/(t^2)
     _____ ## format output to show 2 digits only
   #+end_src

* TODO Training a density model

The ~truehist~ function fits the dataset to a density estimate, and
~density~ does the same with a smoothing effect added. Store the plots
in the file ~1_nile_hist.png~.
#+begin_src R :results graphics file :file _______
  library(MASS)
  ## fit Nile data to histogram
  truehist(Nile,
           las=1,
           xlab="",
           main="")
  par(new=TRUE)  # plot next plot on top of previous plot

  ## plot density estimate of Nile
  plot(density(Nile),
       col="red",
       col.lab="red",
       lwd=2,
       xaxt="n",
       yaxt="n",
       main="")
  title("Flow through the Nile 1872-1970")
#+end_src

* TODO Training a linear model

1) The ~lm~ function needs points to fit a line through. ~Nile~ only has
   two vectors, one is the ~Nile~ values, the other one is the ~time~ of
   each instance of ~Nile~. Apply the function ~time~ to ~Nile~:
   #+begin_src R
     ___________
   #+end_src

2) The ~lm~ function attempts to fit a linear model to the ~Nile~
   dataset. Store the result of the code in the file ~1_nile_lm.png~:
   #+begin_src R :results graphics file :file ___________
     model <- lm(Nile ~ time(Nile))
     plot(Nile,
          type="p",
          col="blue",
          pch=16,
          ylab="Flow in mio cubic metres")
     abline(model,
            col="red",
            lwd=2)
     lines(Nile,
           type="l",
           col="black",
           lty=2)
     title("Flow through the Nile at Assuan 1872-1970")
     legend("topright",
            legend=c("Observation", "Linear Model"),
            pch = c(16,NA),
            lty = c(NA, 2),
            col = c("blue", "red"))
   #+end_src

* TODO Wow! Congratulations!

Well done! You've reached the end of the first in-class practice file.

If you've completed all steps, you can now upload the Org-mode file to
Canvas (see ~Assignments > In-class practice~.
